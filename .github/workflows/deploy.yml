name: Deploy to Vercel

on:
  push:
    branches:
      - main      # Deploy to production
      - staging   # Deploy to staging
  pull_request:
    branches:
      - main      # Deploy preview for PRs

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Type Check
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Run Tests
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Build Application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Cache Build Output
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
            .next/standalone
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

  deploy-production:
    name: Deploy to Production
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://dream100.ollisocial.com
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@canary

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Production deployment successful: $DEPLOYMENT_URL"

      - name: Run Post-Deployment Health Check
        run: |
          sleep 30  # Wait for deployment to be ready
          curl -f "${{ steps.deploy.outputs.deployment-url }}/api/health" || exit 1
          echo "‚úÖ Health check passed"

      - name: Notify Slack (Success)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ Production deployment successful!
            Environment: Production
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            URL: ${{ steps.deploy.outputs.deployment-url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ‚ùå Production deployment failed!
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging-dream100.vercel.app
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@canary

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Staging deployment successful: $DEPLOYMENT_URL"

      - name: Run Post-Deployment Health Check
        run: |
          sleep 30  # Wait for deployment to be ready
          curl -f "${{ steps.deploy.outputs.deployment-url }}/api/health" || exit 1
          echo "‚úÖ Health check passed"

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üß™ Staging deployment ${{ job.status }}!
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            URL: ${{ steps.deploy.outputs.deployment-url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-preview:
    name: Deploy Preview
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: preview
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@canary

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Preview deployment successful: $DEPLOYMENT_URL"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';
            const comment = `üöÄ **Preview Deployment Ready!**
            
            üìç **URL:** ${deploymentUrl}
            üåø **Branch:** \`${{ github.head_ref }}\`
            üìù **Commit:** \`${{ github.sha }}\`
            
            **Test the deployment:**
            - [Homepage](${deploymentUrl})
            - [Health Check](${deploymentUrl}/api/health)
            - [API Status](${deploymentUrl}/api/health?detailed=true)
            
            This preview will be updated automatically when you push new changes to this PR.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: npm audit --audit-level=moderate

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  lighthouse-audit:
    name: Lighthouse Audit
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://dream100.ollisocial.com
            https://dream100.ollisocial.com/app
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Comment Lighthouse Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('./lhci_reports/manifest.json'));
            const summary = results.map(result => {
              const { summary } = result;
              const scores = Object.entries(summary)
                .map(([key, value]) => `${key}: ${Math.round(value * 100)}`)
                .join(' | ');
              return `üìä **${result.url}**: ${scores}`;
            }).join('\n');
            
            const comment = `üîç **Lighthouse Audit Results**\n\n${summary}\n\n[View detailed report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            });
